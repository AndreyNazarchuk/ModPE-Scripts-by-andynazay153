////////////////////////////////////////////////
//Welcome to Kyurem838's ModPE Functions Wiki.//
////////////////////////////////////////////////





////////////////////////
//TOP LEVEL NAMESPACED//
////////////////////////



addItemInventory(ID, amount, damage);

//See Player.addItemInventory().

bl_setMobSkin(entity, skin);

//See Entity.setMobSkin(). This variant was meant to be removed in BlockLauncher 1.7.

bl_spawnMob(x, y, z, typeId, skin);

//See Level.spawnMob(). This variant was meant to be removed in BlockLauncher 1.7.

clientMessage(message);

//This sends the player a message.

explode(x, y, z, radius);

//See Level.explode().

getCarriedItem();

//See Player.getCarriedItem().

getLevel();

//Its use is unknwon.

getMCPE();

//This is only for the iOS version of ModPE, therefore is not in ModPE Functions List.txt, and its use is unknown.

getPitch(entity);

//See Entity.getPitch().

getPlayerEnt();

//See Player.getEntity().

getPlayerX();

//See Player.getX().

getPlayerY();

//See Player.getY().

getPlayerZ();

//See Player.getZ().

getTile(x, y, z);

//See Level.getTile().

getYaw(entity);

//See Entity.getYaw().

preventDefault();

//This prevents the default action from happening, e.g. opening a Crafting Table when it is tapped.

print(message);

//This prints a toast message onto the user's screen.

rideAnimal(rider, victim);

//See Entity.rideAnimal().

setNightMode(isNight);

//See Level.setNightMode().

setPosition(entity, x, y, z);

//See Entity.setPosition().

setPositionRelative(entity, x, y, z);

//See Entity.setPositionRelative().

setRot(entity, pitch, yaw);

//See Entity.setRot().

setTile(x, y, z, blockId, blockDamage);

//See Level.setTile.

setVelX(entity, velocity);

//See Entity.setVelX().

setVelY(entity, velocity);

//See Entity.setVelY().

setVelZ(entity, velocity);

//See Entity.setVelZ().

spawnChicken(x, y, z, skin);

//See Level.spawnChicken().

spawnCow(x, y, z, skin);

//See Level.spawnCow().

spawnPigZombie(x, y, z, carriedItem, skin);

//This spawns a Zombie Pigman in the specified coordinates, with the specified skin and with the specified held item.



////////////////////
//MODPE NAMESPACED//
////////////////////

ModPE.joinServer(IP, port);

//See Server.joinServer(). This variant was removed.

ModPE.langEdit(string, value);

//This edits the specified string from the en_US.lang file (found in the Minecraft Pocket Edition assets) to the newly specified value. This method also has the ability to add new strings to en_US.lang, which is useful if you make a recipe for an item without a description. Adding a description to an item is sometimes impossible, including custom blocks and items.

ModPE.leaveGame();

//This forces the player to leave the game.

ModPE.log(message);

//This logs the specified message to the system console.

ModPE.overrideTexture(target, texture);

//This overrides the specified target texture, and replaces it with the desired texture. The texture parameter must be a HTTP URL.

ModPE.readData(key);

//This reads the specified saved data. Example: 

ModPE.removeData(key);

//This removes the specified saved data.

ModPE.resetFov();

//This resets the FoV back to the original FoV.

ModPE.resetImages();

//This resets all overridden textures.

ModPE.saveData(key, value);

//This saves any value as the specified key, which accepts a string.

ModPE.selectLevel(worldName, worldDir, seed, gamemode);

//This forces the player to join the specified world. The parameters seed and gamemode don't have much effect unless you want to enter a world with the specified seed and gamemode.

ModPE.setCamera(entity);

//This sets the specified entity to the camera view, so the player sees what the specified entity is seeing.

ModPE.setFoodItem(ID, textureName, type, halfHeartsHealed, name, stackLimit);

//This creates a new food. For the parameter textureName, open the items.meta file in the MCPE apk assets file, then search for the item texture you want. For the type, there may be different types of the specified item texture. In this example, pickaxe is used:

/* {"uv":[0.3125,0.5625,0.375,0.625,256,256],"name":"pickaxe","additonal_textures":[[0.375,0.5625,0.4375,0.625,256,256],[0.4375,0.5625,0.5,0.625,256,256],[0.5,0.5625,0.5625,0.625,256,256],[0.5625,0.5625,0.625,0.625,256,256]]} */

//Above, in the "additional_textures" section, there are four arrays. The first one is the Wooden Pickaxe, the next is the Stone Pickaxe, etc. you can find these in the items-opaque.png file. The stackLimit parameter is self explanatory.

ModPE.setFov(fov);

//This sets the FoV to the specified FoV.

ModPE.setGameSpeed(ticksPerSecond);

//This sets the game speed to the specified amount of ticks per second.

ModPE.setGuiBlocks(URL);

//This sets the gui_blocks.png to any png file in any HTTP URL.

ModPE.setItem(ID, textureName, type, name, stackLimit);

//This creates a new item. For the parameter textureName, open the items.meta file in the MCPE apk assets file, then search for the item texture you want. For the type, there may be different types of the specified item texture. In this example, pickaxe is used:

//{"uv":[0.3125,0.5625,0.375,0.625,256,256],"name":"pickaxe","additonal_textures":[[0.375,0.5625,0.4375,0.625,256,256],[0.4375,0.5625,0.5,0.625,256,256],[0.5,0.5625,0.5625,0.625,256,256],[0.5625,0.5625,0.625,0.625,256,256]]}

//Above, in the "additional_textures" section, there are four arrays. The first one is the Wooden Pickaxe, the next is the Stone Pickaxe, etc. you can find these in the items-opaque.ong file. The stackLimit parameter is self explanatory.

ModPE.setItems(URL);

//This sets the items.png file to any png file in any HTTP URL.

ModPE.setTerrain(URL);

//This sets the terrain.png file to any png file in any HTTP URL.

ModPE.showTipMessage(message);

//This gives the player a message that looks like the message you get when you go into a Minecart.

ModPE.takeScreenshot(fileName);

//This takes a screenshot with the specified file name. If no file name is entered, ModPE will generate a file name by itself.



////////////////////
//LEVEL NAMESPACED//
////////////////////



Level.addParticle(particleType, x, y, z, velX, velY, velZ, size);

//This adds particles with the specified particle type, the specified velocity, and the specified size at the specified coordinates. The parameter particleType must be between 0 and 15. See All ParticleType ParticleTypes.txt for more information.

Level.destroyBlock(x, y, z, shouldDrop);

//This destroys the block at the specified coordinates. The parameter shouldDrop is a boolean, and if you enter true, it will drop itself, not the normal drop.

Level.dropItem(x, y, z, radius, ID, amount, amount, damage);

//This drops the specified item at the specified coordinates. The parameter radius adjusts the Y axis.

Level.explode(x, y, z, radius);

//This explodes with the specified radius at the specified coordinates.

Level.getAddress();

//Its use is unknown.

Level.getBrightness(x, y, z);

//This returns the raw brightness of the block at the specified coordinates.

Level.getChestSlot(x, y, z, slot);

//This returns the ID of the item from the specified slot of the chest at the specified coordinates. The parameter slot works like an array, so slot 1 would become slot 0.

Level.getChestSlotCount(x, y, z, slot);

//This returns the damage of the item from the specified slot of the chest at the specified coordinates.

Level.getChestSlotData(x, y, z, slot);

//This is the same as Level.getChestSlot() except that it returns the damage, not the ID.

Level.getData(x, y, z);

//This returns the damage value of the block at the specified coordinates.

Level.getFurnaceSlot(x, y, z, slot);

//This gets the item in the furnace in the specified coordinates in the specified slot. Slot 1 is the input item, slot 2 is the fuel item, and slot 3 is the output item.

Level.getFurnaceSlotCount(x, y, z, slot);

//This gets the item count in the furnace in the specified coordinates in the specified slot. Slot 1 is the input item, slot 2 is the fuel item, and slot 3 is the output item.

Level.getFurnaceSlot(x, y, z, slot);

//This gets the item damage in the furnace in the specified coordinates in the specified slot. Slot 0 is the input item, slot 1 is the fuel item, and slot 2 is the output item.

Level.getGameMode();

//This returns the game mode of the world the player is in.

Level.getSignText(x, y, z, line);

//This returns the text on the specified line on the sign at the specified coordinates. The parameter line works like an array, where line 1 would become line 0.

Level.getTile(x, y, z);

//This returns the block ID at the specified coordinates.

Level.getTime();

//This returns the time in ticks.

Level.getWorldDir();

//This returns the world directory.

Level.getWorldName();

//This returns the name of the world the player is in.

Level.playSound(x, y, z, sound, volume, pitch);

//This plays the speicfied sound at the specified coordinates with the specified volume and pitch. 1 as the volume as 1 as the pitch is standard. For more information, see All Sounds.txt.

Level.playSoundEnt(entity, sound, volume, pitch);

//This plays the specified sound at the coordinates of the specified entity with the specified volume and pitch. 1 as the volume and 1 as the pitch is standard. For more information, see All Sounds.txt.

Level.setChestSlot(x, y, z, slot, ID, amount, damage);

//This sets the specified chest slot to the specified ID with the specified damage and the specified amount.

Level.setFurnaceSlot(x, y, z, ID, amount, damage, slot);

//This sets the specified furnace slot to the specified ID with the specified damage and the specified amount. Slot 1 is the input item, slot 2 is the fuel item, and slot 3 is the output item.

Level.setGameMode(gamemode);

//This sets the game mode of the current world to the specified game mode.

Level.setNightMode(isNight);

//This sets it to night. It doesn't work properly, so Level.setTime() is recommended.

Level.setSignText(x, y, z, line, text);

//This is the same as Level.getSignText() except that you change the text on a sign.

Level.setSpawn(x, y, z);

//This sets the player's spawn point to the specified coordinates.

Level.setTile(x, y, z, blockId, blockDamage);

//This sets the block at the specified coordinates with the specified block.

Level.setTime(ticks);

//This sets the time to a specified amount of ticks.

Level.spawnChicken(x, y, z, skin);

//This spawns a Chicken in the specified location and with the specified skin.

Level.spawnCow(x, y, z, skin);

//This spawns a Cow in the specified location and with the specified skin.

Level.spawnMob(x, y, z, typeId, skin);

//This can spawn any entity in the specified location and with the specified skin. For more information, see Entity Type IDs List.txt.



/////////////////////
//PLAYER NAMESPACED//
/////////////////////



Player.addItemCreativeInv(ID, amount, damage);

//This adds the specified item with the specified ID, amount, and damage to the player's creative inventory. This only works with the newLevel hook, and crashes when used with some items, including custom items.

Player.addItemInventory(ID, amount, damage);

//This adds the specified item with the specified ID, amount, and damage to the player's inventory. This only works in survival.

Player.clearInventorySlot(slot);

//This clears the specified inventory slot in the player's inventory. In creative, this only works with the hotbar.

Player.getArmorSlot(slot);

//This returns the ID of the item in the specified armor slot in the player's inventory.

Player.getArmorSlotDamage(slot);

//This returns the damage of the item in the specified armor slot in the player's inventory.

Player.getCarriedItem();

//This returns the ID of the item that the player is carrying.

Player.getCarriedItemCount();

//This returns how much there is of the item that the player is carrying.

Player.getCarriedItemData();

//This returns the damage of the item that the player is carrying.

Player.getEntity();

//This returns the player's entity.

Player.getInventorySlot(slot);

//This returns the ID of the item in the specified slot of the player's inventory.

Player.getInventorySlotCount(slot);

//This returns how much there is of the item in the specified slot of the player's inventory.

Player.getInventorySlotData(slot);

//This returns the damage of the item in the specified slot of the player's inventory.

Player.getPointedBlockData();

//This returns the player's pointed block data.

Player.getPointedBlockId();

//This returns the player's pointed block ID.

Player.getPointedBlockSide();

//This returns the player's pointed block side.

Player.getPointedBlockX();

//This returns the player's pointed block X.

Player.getPointedBlockY();

//This returns the player's pointed block Y.

Player.getPointedBlockZ();

//This returns the player's pointed block Z.

Player.getPointedEntity();

//This returns the player's pointed entity.

Player.getName(player);

//This returns the specified player's user name.

Player.getSelectedSlotId();

//This returns the ID of the slot that the player has selected.

Player.getX();

//This returns the player's X coordinate.

Player.getY();

//This returns the player's Y coordinate.

Player.getZ();

//This returns the player's Z coordinate.

Player.isPlayer(player);

//This returns if the specified player is a player or not.

Player.setArmorSlot(slot, ID, damage);

//This sets the specified armor slot in the player's inventory to the specified item.

Player.setHealth(halfHearts);

//This sets the player's health to the specified amount of half hearts.



/////////////////////
//ENTITY NAMESPACED//
/////////////////////



Entity.getAll();

//This returns all the entities in the world.

Entity.getAnimalAge(entity);

//This returns the specified entity's age.

Entity.getEntityTypeId(entity);

//This returns the entity type ID of the specified entity. If an entity doesn't have an entity type ID, it will return 0. One example of such an entity is a player. See Entity Type IDs List.txt for more information.

Entity.getHealth(entity);

//This returns the amount of half hearts the specified entity has.

Entity.getMobSkin(entity);

//This returns the specified entity's skin.

Entity.getNameTag(entity);

//This returns the specified entity's name tag.

Entity.getPitch(entity);

//This returns the specified entity's pitch.

Entity.getRenderType(entity);

//This returns the specified entity's render type. For more information, see All Entity Render Types.txt.

Entity.getRider(entity);

//This returns the entity that is riding the specified entity.

Entity.getRiding(entity);

//This returns the entity that the specified entity is riding.

Entity.getVelX(entity);

//This returns the specified entity's X velocity.

Entity.getVelY(entity);

//This returns the specified entity's Y velocity.

Entity.getVelZ(entity);

//This returns the specified entity's Z velocity.

Entity.getX(entity);

//This returns the X coordinate of the specified entity.

Entity.getY(entity);

//This returns the Y coordinate of the specified entity.

Entity.getYaw(entity);

//This returns the specified entity's yaw.

Entity.getZ(entity);

//This returns the Z coordinate of the specified entity.

Entity.remove(entity);

//This removes the specified entity. This is very glitchy when a player is removed.

Entity.rideAnimal(rider, victim);

//This makes the specified entity rider another specified entity.

Entity.setAnimalAge(entity, age);

//This sets the specified entity's age, with -24000 being a baby and 0 being an adult.

Entity.setCarriedItem(entity, ID, amount, damage);

//This sets the specified entity's carried item.

Entity.setFireTicks(entity, ticks);

//This sets the specified entity on fire for the specified amount of ticks.

Entity.setHealth(entity, halfHearts);

//This sets the specified entity's health to the specified amount of half hearts.

Entity.setMobSkin(entity, skin);

//This sets the specified entity's skin to a file in the Minecraft Pocket Edition assets.

Entity.setNameTag(entity, name);

//This set's the specified entity's name tag to the specified name. This only works with mobs and player.s

Entity.setPosition(entity, x, y, z);

//This sets the specified entity's position to the specified coordinates.

Entity.setPositionRelative(entity, x, y, z);

//This sets the specified entity's relative position to the specified coordinates.

Entity.setRenderType(entity, renderType);

//This sets the entity's render type to the specified render type. For more information, see All Entity Render Types.txt.

Entity.setRot(entity, pitch, yaw);

//This sets the specified entity's rotation.

Entity.setSneaking(entity, setSneaking);

//This sets the specified entity sneaking if the boolean is true. If it is false, it stops the entity from sneaking.

Entity.setVelX(entity, velocity);

//This sets the specified entity's X velocity where 0.3 is one block.

Entity.setVelY(entity, velocity);

//This sets the specified entity's Y velocity where 0.3 is one block.

Entity.setVelZ(entity, velocity);

//This sets the specified entity's Z velocity where 0.3 is one block.

Entity.spawnMob(x, y, z, typeId, skin);

//See Level.spawnMob(). This variant will be removed soon.



///////////////////
//ITEM NAMESPACED//
///////////////////



Item.addCraftRecipe(outputId, outputAmount, outputDamage, ingredients);

//This adds the specified craft recipe. If a script has already added a recipe for the same item, it will just replace that recipe. The parameter ingredients is an array, taking the structure of [inputId, inputAmount, inputDamage].

Item.addShapedRecipe(outputId, outputAmount, outputDamage, ingredients, ingredientData);

//This adds the specified craft recipe. If a script has already added a recipe for the same item, it will just replace that recipe. The parameter ingredients is an array, taking the structure of ["abc", "def", "ghi"], where each letter is a different item, the first letter is the top left corner of the recipe, and the last letter is the bottom right corner of the recipe. The letters don't have to be as shown - they can be any letter, although they are case sensitive. The parameter ingredientData takes the structure of ["a", id, damage, "b", id, damage, etc.] where "a" in the parameter ingredients represents the item with the specified ID and damage that appears after the "a" in the ingredientData parameter.

Item.addFurnaceRecipe(inputId, outputId, outputDamage);

//This adds the specified furnace recipe.

Item.getName(ID, damage, getRaw);

//This gets the name of the specified item. The boolean getRaw specified whether it will get the raw name or not.

Item.setMaxDamage(ID, maxDamage);

//This sets the maximum damage of the specified item.



////////////////////
//BLOCK NAMESPACED//
////////////////////



Block.defineBlock(ID, name, textures, baseMaterial, isOpaque, renderShape);

//This defines the specified block. The isOpaque parameter is a boolean. For the renderShape parameter, see Render Shapes For Block.defineBlock().txt. For the baseMaterial parameter, put in a block ID and it will take the tools required to break the selected block to the custom block. For the textures parameter, put in an array containing all the texture names for each side, which can be found in the terrain.meta file. An example:
"name":"nether_wart_stage_x","additonal_textures":[[0.4375,0.25,0.4687,0.3125,512,256],[0.4688,0.25,0.5,0.3125,512,256]]
//The name is "nether_wart_stage_x", in which the x can be replaced with the stage you want. For all texture names, see All Block Texture Names.txt.

Block.getRenderType(ID);

//This gets the render shape of the block with the specified ID. For more information, see All Block Render Shapes.txt.

Block.setColor(ID, color);

//This sets the color of a block. The parameter color is an array containing all the hex codes for all the colors you want, e.g. 0x80ffffff. The first in the array is for the block with the damage of 0, the second is for the block with the damage of 1, etc. If the parameter color is not an array, it will go for all damage values.

Block.setDestroyTime(ID, seconds);

//This sets the specified block's destroy time to the specified amount of seconds.

Block.setExplosionResistance(ID, resistance);

//This sets the specified block's explosion resistance.

Block.setLightLevel(ID, lightLevel);

//This sets the specified block's light level.

Block.setRenderLayer(ID, renderLayer);

//This sets the specified block's render layer. 0 means it is opaque, 1 means it is transparent, and 2 means it is translucent.

Block.setRenderType(ID, renderShape);

//This sets the block with the specified ID to the specified render shape. For more information, see All Block Render Shapes.txt.

Block.setShape(ID, minX, minY, minZ, maxX, maxY, maxZ);

//This sets the specified block's shape. The minX, minY, and minY parameters state how much it is away from where it is placed, and the rest state how far away it is from minX, minY, and minZ.



/////////////////////
//SERVER NAMESPACED//
/////////////////////

Server.getAddress();

//This returns the IP address of the server that the player is in.

Server.getAllPlayerNames();

//This returns the names of all the players in the world as an array.

Server.getAllPlayers();

//This returns all the players in the world as an array.

Server.getPort();

//This returns the port of the server that the player is in.

Server.joinServer(IP, port);

//This forces the player to join the server with the specified IP address and port.

Server.sendChat(message);

//This sends a chat message to the server using the player's name.