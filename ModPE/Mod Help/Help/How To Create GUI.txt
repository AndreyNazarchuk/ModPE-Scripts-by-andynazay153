HOW TO MAKE GUI (WIP)

First, you will have to create a variable that stores Minecraft Pocket Edition's context. Without this, creating GUI is impossible.

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

Next, you will have to call the runOnUiThread() method on ctx. The runOnUiThread() method has one required parameter - a Runnable. In JavaScript, you put in an object in with one of its properties being called "run", which should be a function:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	
}}));

Now that you have the main shell - you can move on to the actual GUI.

CREATING A BUTTON (READ THIS FIRST)

The first thing you will need to know is how to make a button. This isn't too hard. You will first need a new Button object. The Button constructor has one required parameter - the context:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
}}));

Next, you need to set the text on the button. To do so, you must use the setText() method:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
}}));

Here, I have set the text on the button to the string "Text". This can be changed to any string you like.

Next, you must use the setOnClickListener() method, which requires one parameter - an onClickListener object. The onClickListener constructor requires one parameter - in JavaScript, you put in an object in with one of its properties being called "onClick", which should be a function with the parameter "viewargs" (or whatever you want to call it). This function will be called whenever the button is pressed:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		//Put your code here.
		Player.setHealth(0);
	}
}}));

Above, I have added the line Player.setHealth(0), so whenever the button is pressed, the player will get killed.

Next, you will have to create a LinearLayout. Without the LinearLayout, the button you have created is useless. The LinearLayout constructor has one parameter - the context:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
}}));

Then you add the button to the layout:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
	layout.addView(button);
}}));

Now you have to create a PopupWindow. The PopupWindow is the part where you actually show the button. Here is how to do it:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
	layout.addView(button);
	var btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
}}));

To add the layout to the PopupWindow, use the setContentView method, which has one parameter - the layout. To set the size of the button, use the setWidth and setHeight methods. The "default" parameter for the setWidth and setHeight methods is android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
	layout.addView(button);
	var btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
	btnWindow.setContentView(layout);
	btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
}}));

Now you set the backgroundDrawable for the PopupWindow using the setBackgroundDrawable method, which has one parameter. For this tutorial, I am using a ColorDrawable:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
	layout.addView(button);
	var btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
	btnWindow.setContentView(layout);
	btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	btnWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY)); //It doesn't have to be Color.GRAY - it could be Color.BLACK. You can find a list of all the colours using a for loop: for(var i in android.graphics.Color) clientMessage(i);
}}));

Finally, you show the PopupWindow, which will show the button. To do that, you have to use the showAtLocation method:

ctx.runOnUiThread(new java.lang.Runnable({run: function() {
	var button = new android.widget.Button(ctx);
	button.setText("Text");
	button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
		Player.setHealth(0);
	}
	var layout = new android.widget.LinearLayout(ctx);
	layout.addView(button);
	var btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
	btnWindow.setContentView(layout);
	btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	btnWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY));
	btnWindow.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP /*It could easily be "LEFT" and "BOTTOM" if you wanted to know*/, 400, 10); //For the final two parameters, the first one is how much from the right it is (unless you used something else, e.g. LEFT, in which case it would be how much from the left it is), and the second one how much from the top it is (unless you used something else, e.g. BOTTOM, in which case it would be how much from the bottom it is).
}}));

You now have a button that kills the player when pressed. It is recommended that you put the variable for the PopupWindow set to null at the top of the script instead of defining it in the "run" method, then putting all the code in the newLevel() or selectLeveHook() hooks. Then you can get rid of it in the leaveGame hook using the dismiss() method:

var btnWindow = null; //You actually don't have to define it at all - you could just type var btnWindow; instead.

function selectLevelHook() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	ctx.runOnUiThread(new java.lang.Runnable({run: function() {
		var button = new android.widget.Button(ctx);
		button.setText("Text");
		button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
			Player.setHealth(0);
		}
		var layout = new android.widget.LinearLayout(ctx);
		layout.addView(button);
		btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density)); //Note how I removed the "var" at the start of this line.
		btnWindow.setContentView(layout);
		btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
		btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
		btnWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY));
		btnWindow.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 400, 10);
	}}));
}

function leaveGame() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	ctx.runOnUiThread(new java.lang.Runnable({run: function() {
		if(btnWindow != null) btnWindow.dismiss(); //Normally, you wouldn't need the "!= null" bit.
	}}));
}

Also, you could include a try catch statement to catch any errors. If there is no try catch statement and an error occurs, the game will crash. This happens whenever an error occurs in the "run" method. This is highly recommended:

var btnWindow = null;

function selectLevelHook() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	ctx.runOnUiThread(new java.lang.Runnable({run: function() {
		try {
			var button = new android.widget.Button(ctx);
			button.setText("Text");
			button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
				Player.setHealth(0);
			}
			var layout = new android.widget.LinearLayout(ctx);
			layout.addView(button);
			btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
			btnWindow.setContentView(layout);
			btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
			btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
			btnWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY));
			btnWindow.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 400, 10);
		} catch(e) { //The "e" can be anything you like, e.g. "error".
			print("Error: " + e); //"e" is the variable containing the error message.
		}
	}}));
}

function leaveGame() {
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().runOnUiThread(new java.lang.Runnable({run: function() { //Because we are only using the context once, there is really no point in defining another variable.
		try {
			if(btnWindow != null) btnWindow.dismiss();
		} catch(e) {
			print("Error: " + e);
		}
	}}));
}

Here is the final product:

var btnWindow = null;

function selectLevelHook() {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	ctx.runOnUiThread(new java.lang.Runnable({run: function() {
		try {
			var button = new android.widget.Button(ctx);
			button.setText("Text");
			button.setOnClickListener(new android.view.View.OnClickListener({onClick: (viewargs) {
				Player.setHealth(0);
			}
			var layout = new android.widget.LinearLayout(ctx);
			layout.addView(button);
			btnWindow = new android.widget.PopupWindow(layout, Math.ceil(48 * ctx.getResources().getDisplayMetrics().density), Math.ceil(48 * ctx.getResources().getDisplayMetrics().density));
			btnWindow.setContentView(layout);
			btnWindow.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
			btnWindow.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
			btnWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY));
			btnWindow.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 400, 10);
		} catch(e) {
			print("Error: " + e);
		}
	}}));
}

function leaveGame() {
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().runOnUiThread(new java.lang.Runnable({run: function() {
		try {
			if(btnWindow != null) btnWindow.dismiss();
		} catch(e) {
			print("Error: " + e);
		}
	}}));
}

COFFEESCRIPT

Just in case you want to do this in CoffeeScript, I will put all the finished products in this section, but in CoffeeScript.

CREATING A BUTTON

btnWindow = null

selectLevelHook = ->
	ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
	ctx.runOnUiThread new java.lang.Runnable {run: ->
		try
			button = new android.widget.Button ctx
			button.setText "Text"
			button.setOnClickListener new android.view.View.OnClickListener {onClick: (viewargs) ->
				Player.setHealth 0
			}
			layout = new android.widget.LinearLayout ctx
			layout.addView button
			btnWindow = new android.widget.PopupWindow layout, (Math.ceil 48 * ctx.getResources().getDisplayMetrics().density), Math.ceil 48 * ctx.getResources().getDisplayMetrics().density
			btnWindow.setContentView layout
			btnWindow.setWidth android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
			btnWindow.setHeight android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
			btnWindow.setBackgroundDrawable new android.graphics.drawable.ColorDrawable android.graphics.Color.GRAY
			btnWindow.showAtLocation ctx.getWindow().getDecorView(), (android.view.Gravity.RIGHT | android.view.Gravity.TOP), 400, 10
		catch e print "Error: " + e
	}

leaveGame = ->
	com.mojang.minecraftpe.MainActivity.currentMainActivity.get().runOnUiThread new java.lang.Runnable {run: ->
		try (btnWindow.dismiss() if btnWindow isnt null) catch e print "Error: " + e
	}